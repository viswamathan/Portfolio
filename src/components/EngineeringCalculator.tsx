import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Calculator, Download, ChevronDown, ChevronUp, X, Zap } from 'lucide-react';

const EngineeringCalculator = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const [values, setValues] = useState({
    force: '',
    area: '',
    deltaLength: '',
    originalLength: '',
    youngsModulus: '',
    stress: '',
    strain: '',
    pressure: '',
    shearStress: '',
  });

  const calculateResults = () => {
    const force = parseFloat(values.force);
    const area = parseFloat(values.area);
    const deltaLength = parseFloat(values.deltaLength);
    const originalLength = parseFloat(values.originalLength);

    if (!isNaN(force) && !isNaN(area)) {
      const stress = force / area;
      const pressure = force / area;
      const shearStress = force / area;
      setValues(prev => ({
        ...prev,
        stress: stress.toFixed(2),
        pressure: pressure.toFixed(2),
        shearStress: shearStress.toFixed(2),
      }));
    }

    if (!isNaN(deltaLength) && !isNaN(originalLength)) {
      const strain = deltaLength / originalLength;
      setValues(prev => ({ ...prev, strain: strain.toFixed(4) }));
    }

    if (values.stress && values.strain) {
      const E = parseFloat(values.stress) / parseFloat(values.strain);
      setValues(prev => ({ ...prev, youngsModulus: E.toFixed(2) }));
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setValues(prev => ({ ...prev, [name]: value }));
  };

  const resetCalculator = () => {
    setValues({
      force: '',
      area: '',
      deltaLength: '',
      originalLength: '',
      youngsModulus: '',
      stress: '',
      strain: '',
      pressure: '',
      shearStress: '',
    });
  };

  const toggleSection = (section: string) => {
    setExpandedSection(prev => (prev === section ? null : section));
  };

  const generateReport = () => {
    const report = `Engineering Analysis Report
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

=== STRESS ANALYSIS ===
Force Applied: ${values.force} N
Cross-sectional Area: ${values.area} m²
Calculated Stress: ${values.stress} Pa
Safety Factor: ${values.stress ? (parseFloat(values.stress) > 0 ? 'Within limits' : 'N/A') : 'N/A'}

=== PRESSURE ANALYSIS ===
Applied Force: ${values.force} N
Contact Area: ${values.area} m²
Calculated Pressure: ${values.pressure} Pa

=== SHEAR STRESS ANALYSIS ===
Shear Force: ${values.force} N
Shear Area: ${values.area} m²
Calculated Shear Stress: ${values.shearStress} Pa

=== STRAIN ANALYSIS ===
Change in Length: ${values.deltaLength} m
Original Length: ${values.originalLength} m
Calculated Strain: ${values.strain}
Strain Type: ${parseFloat(values.strain) > 0 ? 'Tensile' : parseFloat(values.strain) < 0 ? 'Compressive' : 'No deformation'}

=== MATERIAL PROPERTIES ===
Young's Modulus: ${values.youngsModulus} Pa
Material Stiffness: ${values.youngsModulus ? (parseFloat(values.youngsModulus) > 200000000000 ? 'High' : parseFloat(values.youngsModulus) > 70000000000 ? 'Medium' : 'Low') : 'N/A'}

=== RECOMMENDATIONS ===
${values.stress && parseFloat(values.stress) > 250000000 ? '⚠️ High stress detected - Consider material upgrade or design modification' : '✅ Stress levels appear acceptable'}
${values.strain && Math.abs(parseFloat(values.strain)) > 0.002 ? '⚠️ Significant deformation - Review design constraints' : '✅ Deformation within acceptable limits'}

Generated by Viswa M's Engineering Calculator
Portfolio: https://viswam-portfolio.com
`;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `engineering-analysis-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const calculatorVariants = {
    hidden: { 
      opacity: 0, 
      scale: 0.8,
      y: 100
    },
    visible: { 
      opacity: 1, 
      scale: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 30
      }
    },
    exit: {
      opacity: 0,
      scale: 0.8,
      y: 100,
      transition: {
        duration: 0.3
      }
    }
  };

  return (
    <>
      {/* Floating Calculator Button */}
      <motion.div 
        className="fixed bottom-20 left-4 z-50"
        initial={{ scale: 0, rotate: -180 }}
        animate={{ scale: 1, rotate: 0 }}
        transition={{ delay: 2, type: "spring", stiffness: 260, damping: 20 }}
      >
        <motion.button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-gradient-to-r from-purple-600 to-blue-600 p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <Calculator className="w-6 h-6 text-white group-hover:rotate-12 transition-transform" />
          <motion.div
            className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full opacity-0 group-hover:opacity-30 blur-lg transition-opacity"
            whileHover={{ scale: 1.2 }}
          />
        </motion.button>
      </motion.div>

      {/* Calculator Modal */}
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
              onClick={() => setIsOpen(false)}
            />

            {/* Calculator Panel */}
            <motion.div
              variants={calculatorVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              className="fixed bottom-4 left-4 right-4 sm:left-4 sm:right-auto sm:w-96 bg-gray-900/95 backdrop-blur-md border border-purple-500/30 rounded-2xl shadow-2xl z-50 max-h-[80vh] overflow-y-auto"
            >
              {/* Header */}
              <div className="sticky top-0 bg-gray-900/95 backdrop-blur-md p-6 border-b border-purple-500/20 rounded-t-2xl">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg">
                      <Zap className="w-5 h-5 text-white" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-white">Engineering Calculator</h3>
                      <p className="text-sm text-gray-400">Advanced Mechanical Analysis</p>
                    </div>
                  </div>
                  <motion.button
                    onClick={() => setIsOpen(false)}
                    className="p-2 hover:bg-gray-800 rounded-full transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <X className="w-5 h-5 text-gray-400" />
                  </motion.button>
                </div>
              </div>

              <div className="p-6 space-y-6">
                {/* Stress Analysis Section */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  <motion.div
                    className="flex justify-between items-center cursor-pointer p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 transition-colors"
                    onClick={() => toggleSection('stress')}
                    whileHover={{ scale: 1.02 }}
                  >
                    <h4 className="text-purple-400 font-semibold flex items-center gap-2">
                      <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                      Stress Calculator (σ = F/A)
                    </h4>
                    <motion.div
                      animate={{ rotate: expandedSection === 'stress' ? 180 : 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <ChevronDown className="w-5 h-5 text-gray-400" />
                    </motion.div>
                  </motion.div>
                  
                  <AnimatePresence>
                    {expandedSection === 'stress' && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="grid grid-cols-2 gap-4 mt-4 overflow-hidden"
                      >
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Force (N)</label>
                          <input
                            type="number"
                            name="force"
                            value={values.force}
                            onChange={handleInputChange}
                            className="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                            placeholder="Enter force"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">Area (m²)</label>
                          <input
                            type="number"
                            name="area"
                            value={values.area}
                            onChange={handleInputChange}
                            className="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                            placeholder="Enter area"
                          />
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>

                {/* Strain Analysis Section */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  <motion.div
                    className="flex justify-between items-center cursor-pointer p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 transition-colors"
                    onClick={() => toggleSection('strain')}
                    whileHover={{ scale: 1.02 }}
                  >
                    <h4 className="text-blue-400 font-semibold flex items-center gap-2">
                      <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                      Strain Calculator (ε = ΔL/L)
                    </h4>
                    <motion.div
                      animate={{ rotate: expandedSection === 'strain' ? 180 : 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <ChevronDown className="w-5 h-5 text-gray-400" />
                    </motion.div>
                  </motion.div>
                  
                  <AnimatePresence>
                    {expandedSection === 'strain' && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="grid grid-cols-2 gap-4 mt-4 overflow-hidden"
                      >
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">ΔL (m)</label>
                          <input
                            type="number"
                            name="deltaLength"
                            value={values.deltaLength}
                            onChange={handleInputChange}
                            className="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                            placeholder="Change in length"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-2">L (m)</label>
                          <input
                            type="number"
                            name="originalLength"
                            value={values.originalLength}
                            onChange={handleInputChange}
                            className="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                            placeholder="Original length"
                          />
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>

                {/* Results Section */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                  className="bg-gradient-to-r from-purple-900/20 to-blue-900/20 p-4 rounded-lg border border-purple-500/20"
                >
                  <h4 className="text-green-400 font-semibold mb-4 flex items-center gap-2">
                    <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                    Results
                  </h4>
                  <div className="grid grid-cols-2 gap-4">
                    {[
                      { label: 'Stress (Pa)', value: values.stress, color: 'purple' },
                      { label: 'Strain', value: values.strain, color: 'blue' },
                      { label: 'Pressure (Pa)', value: values.pressure, color: 'green' },
                      { label: 'Shear Stress (Pa)', value: values.shearStress, color: 'yellow' }
                    ].map((result, index) => (
                      <div key={result.label}>
                        <label className="block text-sm font-medium text-gray-300 mb-2">{result.label}</label>
                        <input
                          type="text"
                          value={result.value}
                          readOnly
                          className={`w-full bg-gray-800 border border-${result.color}-500/30 rounded-lg px-3 py-2 text-${result.color}-400 font-mono`}
                        />
                      </div>
                    ))}
                  </div>
                </motion.div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3">
                  <motion.button
                    onClick={calculateResults}
                    className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white py-3 px-4 rounded-lg transition-all duration-300 font-semibold flex items-center justify-center gap-2"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Zap className="w-4 h-4" />
                    Calculate
                  </motion.button>
                  
                  <motion.button
                    onClick={resetCalculator}
                    className="flex-1 bg-gray-700 hover:bg-gray-600 text-white py-3 px-4 rounded-lg transition-all duration-300 font-semibold"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    Reset
                  </motion.button>
                  
                  <motion.button
                    onClick={generateReport}
                    className="flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg transition-all duration-300 font-semibold"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Download className="w-4 h-4" />
                    Report
                  </motion.button>
                </div>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  );
};

export default EngineeringCalculator;